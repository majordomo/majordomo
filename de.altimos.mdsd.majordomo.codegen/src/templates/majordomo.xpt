«IMPORT majordomo»
«EXTENSION templates::majordomo»
«EXTENSION org::eclipse::xtend::util::stdlib::uid»

«DEFINE main FOR Majordomo»
«FILE "MConfiguration.java"»
package de.altimos.mdsd.majordomo.simulator;

import de.altimos.mdsd.majordomo.simulator.*;
import de.altimos.mdsd.majordomo.simulator.assemblies.*;
import javax.swing.*;

public class MConfiguration {

	private MAssemblyContainer «house.varname()»;
	«FOREACH house.actors.union(house.sensors) AS o»
		private «o.assemblyClass()» «o.varname()»;
	«ENDFOREACH»
		
	«FOREACH rooms AS room»
		private MAssemblyContainer «room.varname()»;
		«FOREACH room.actors.union(room.sensors) AS o»
			private «o.assemblyClass()» «o.varname()»;
		«ENDFOREACH»
	«ENDFOREACH»
	
	«FOREACH this.program.rules AS rule»
		private MAssemblyProcessor «rule.varname()»;
	«ENDFOREACH»
	
	public void buildAssemblies(MajordomoSimulator sim) {
		«house.varname()» = sim.createAssemblyContainer(0l, "House");
		«FOREACH house.actors.union(house.sensors) AS o»
			«o.varname()» = new «o.assemblyClass()»("«o.name»");
			«o.varname()».setIcon(ClassLoader.getSystemResource("icons/«o.metaTypeSimpleName()».gif"));
		«ENDFOREACH»
			
		«FOREACH rooms AS room»
			«room.varname()» = sim.createAssemblyContainer(«room.uid()»l, "«room.name»");
			«FOREACH room.actors.union(room.sensors) AS o»
				«o.varname()» = new «o.assemblyClass()»("«o.name»");
				«o.varname()».setIcon(ClassLoader.getSystemResource("icons/«o.metaTypeSimpleName()».gif"));
			«ENDFOREACH»
		«ENDFOREACH»
	}
	
	public void buildAssemblyProcessors() {
		«FOREACH this.program.rules AS rule»
			«rule.varname()» = new MAssemblyProcessor(new MAssemblyRunnable() {
				public boolean processReq() {
					return «EXPAND Statement FOR rule.statement»;
				}
				
				public void process() {
					«EXPAND Actions FOR rule.actions»
				}
			});
		«ENDFOREACH»
	}
	
	public void setupAssemblies() {
		«FOREACH house.sensors.union(house.actors) AS o»
			«house.varname()».installAssembly(«o.varname()»);
		«ENDFOREACH»
			
		«FOREACH rooms AS room»
			«FOREACH room.sensors.union(room.actors) AS o»
				«room.varname()».installAssembly(«o.varname()»);
			«ENDFOREACH»
		«ENDFOREACH»
		
		«FOREACH this.program.rules AS rule»
			«FOREACH rule.statement.sensors() AS s»
				«s.varname()».registerAssemblyProcessor(«rule.varname()»);
			«ENDFOREACH»
		«ENDFOREACH»
	}
	
	public void initAssemblies() {
		«FOREACH this.program.rules AS rule»
			«rule.varname()».invoke();
		«ENDFOREACH»
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE Statement FOR Statement»
	/* UNDEFINED STATEMENT */ false /* UNDEFINED STATEMENT END */
«ENDDEFINE»
«DEFINE Statement FOR BooleanSensorStatement»
	«sensor.varname()».readValue()
«ENDDEFINE»
«DEFINE Statement FOR CompareOperation»
	«EXPAND ValueExpression FOR left» «comparator()» «EXPAND ValueExpression FOR right»
«ENDDEFINE»
«DEFINE Statement FOR BinaryOperation»
	(«EXPAND Statement FOR left» «operator()» «EXPAND Statement FOR right»)
«ENDDEFINE»
«DEFINE Statement FOR NotOperation»
	(! «EXPAND Statement FOR statement»)
«ENDDEFINE»
«DEFINE Statement FOR StatementReference»
	(/* REF */ «EXPAND Statement FOR ref»)
«ENDDEFINE»
«DEFINE Statement FOR PreparedStatement»
	(/* PREP */ «EXPAND Statement FOR statement»)
«ENDDEFINE»

«DEFINE ValueExpression FOR ValueExpression»
	null
«ENDDEFINE»
«DEFINE ValueExpression FOR SensorValue»
	«sensor.varname()».readValue()
«ENDDEFINE»
«DEFINE ValueExpression FOR ConstantValue»
	«value»
«ENDDEFINE»

«DEFINE Actions FOR List[Action]»
	«FOREACH this AS a» «EXPAND Action FOR a» «ENDFOREACH»
«ENDDEFINE»
«DEFINE Action FOR Action» /* UNHANDLED ACTION: «metaTypeSimpleName()» */; «ENDDEFINE»
«DEFINE Action FOR FloatAction» «actor.varname()».setValue(«value»); «ENDDEFINE»
«DEFINE Action FOR BooleanAction» «actor.varname()».setValue(«value»); «ENDDEFINE»
«DEFINE Action FOR ActionSetReference» «EXPAND Actions FOR ref.actions» «ENDDEFINE»
