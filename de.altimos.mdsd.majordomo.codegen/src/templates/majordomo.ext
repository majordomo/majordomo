import majordomo;
extension org::eclipse::xtend::util::stdlib::uid;

String metaTypeSimpleName(Object o): o.metaType.name.replaceAll("majordomo::", "");
String varname(Object obj): '_' + obj.metaTypeSimpleName() + "_" + obj.uid();
String assemblyClass(Extension ext): "M" + ext.metaTypeSimpleName() + "Assembly";

Actor actor(Action action): null;
Actor actor(FloatAction action): action.actor;
Actor actor(BooleanAction action): action.actor;
	
Object value(Action action): null;
Object value(FloatAction action): action.value;
Object value(BooleanAction action): action.value;
	
Extendable ctx(Extension ext): null;
Extendable ctx(Sensor s): s.ctx;
Extendable ctx(Actor a): a.ctx;
	
String scopeName(Extension ext):
	"m." + (House.isInstance(ext.ctx()) ? "" : ((Room) ext.ctx()).name + ".") + ext.name;
	
List[Sensor] sensors(Statement stmt):
	{};
	
List[Sensor] sensors(BooleanSensorStatement stmt):
	{stmt.sensor};
	
List[Sensor] sensors(BinaryOperation stmt):
	stmt.left.sensors().union(stmt.right.sensors());
	
List[Sensor] sensors(NotOperation stmt):
	stmt.statement.sensors();
	
List[Sensor] sensors(StatementReference stmt):
	stmt.ref.statement.sensors();

List[Sensor] sensors(CompareOperation stmt):
	stmt.left.sensors();
	
List[Sensor] sensors(ValueExpression exp):
	{};
	
List[Sensor] sensors(SensorValue exp):
	{exp.sensor};
	
String comparator(CompareOperation stmt):
	switch (stmt.comparator.toString()) {
		case 'GT': '>'
		case 'GE': '>='
		case 'LT': '<'
		case 'LE': '<='
		default: '!='
	};
	
String operator(BinaryOperation stmt): '/* UNDEFD OP */ && /* UNDEFD OP END */';
String operator(BinaryAndOperation stmt): '&&';
String operator(BinaryOrOperation stmt): '||';

