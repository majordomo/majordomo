import majordomo;

context Majordomo WARNING "Majordomo wants a house to dominate.":
	this.house != null;
	
context Majordomo WARNING "Majordomo knows no rooms. He's really sad.":
	!this.rooms.isEmpty;
	
context Actor WARNING "Does not have a ctx.": this.ctx != null;
context Sensor WARNING "Does not have a ctx.": this.ctx != null;

context Actor ERROR "Cannot mount "+this.metaType.name+" at "+this.ctx.metaType.name+".":
	(RoomMountable.isInstance(this) && Room.isInstance(this.ctx)) ||
	(HouseMountable.isInstance(this) && House.isInstance(this.ctx));
	
context Sensor ERROR "Cannot mount "+this.metaType.name+" at "+this.ctx.metaType.name+".":
	(RoomMountable.isInstance(this) && Room.isInstance(this.ctx)) ||
	(HouseMountable.isInstance(this) && House.isInstance(this.ctx));

context Rule ERROR "Must have at least one condition.": this.conditions.size > 0;
context Rule ERROR "Must have at least one action.": this.actions.size > 0;

context FloatCondition ERROR "Must have a sensor.": this.sensor != null;
context BooleanCondition ERROR "Must have a sensor.": this.sensor != null;

context FloatAction ERROR "Must have an actor.": this.actor != null;
context BooleanAction ERROR "Must have an actor.": this.actor != null;

// Check if name is NULL because Xtext creates null-named matching elements for cress references. 
// Null name means it cannot resolve reference, so reference does not exists oder is wrong type.
context FloatAction ERROR "Invalid actor reference. Expected reference type is «FloatActor»": 
	FloatActor.isInstance(this.actor) && this.actor.name != null;
context BooleanAction ERROR "Invalid actor reference. Expected reference type is «BooleanActor»": 
	BooleanActor.isInstance(this.actor) && this.actor.name != null;
	
context Extension ERROR this.metaType.name + " must have a name.": this.name != null;
context Room ERROR this.metaType.name + " must have a name.": this.name != null;
	
context Sensor ERROR "Must have a unique name.": !this.ctx.sensors.exists(e|e.name == this.name && e != this);
context Actor ERROR "Must have a unique name.": !this.ctx.actors.exists(e|e.name == this.name && e != this);
