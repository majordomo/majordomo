// automatically generated by Xtext
grammar de.altimos.mdsd.majordomo.dsl.MajordomoDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.altimos.mdsd.majordomo/model/majordomo.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Majordomo:
	{Majordomo}
	(house=House)?
	(rooms+=Room)*
	program=Program
;

Program:
	{Program}
	'program'
	'{'
		(rules+=Rule (';' rules+=Rule)*)? ';'?
	'}'
;


House:
	{House}
	'house'
	'{'
		(sensors+=Sensor)*
		(actors+=Actor)*
	'}'
;

Room:
	'room'
	name=Name
	'{'
		(sensors+=Sensor)*
		(actors+=Actor)*
	'}'
;

Sensor:
	LightSensor | TemperatureSensor | RainSensor | SwitchSensor | NumberSensor | ClockSensor
;

Actor:
	LampActor | RollerActor | RoofWindowActor | RadiatorActor | BoilerActor | CoffeeActor
;

// Rules and Statements
//
Rule:
	statement=Statement '->' (actions+=Action)(',' (actions+=Action))*
;

Statement: 
	BooleanSensorStatement | NotOperation | BinaryOperation | CompareOperation
;
BinaryOperation: 
	left=Statement operator=BinaryOperator right=Statement
;

BooleanSensorStatement:
	sensor=[BooleanSensor|QualifiedName]
;
NotOperation:
	('not' | '!') statement=Statement
;
CompareOperation:
	left=ValueExpression comparator=Comparator right=ValueExpression
;
ValueExpression: 
	SensorValue | ConstantValue
;
SensorValue: 
	sensor=[FloatSensor|QualifiedName]
;
ConstantValue: 
	value=EFloat
;
Action: 
	BooleanAction | FloatAction
;
BooleanAction:
	actor=[BooleanActor|QualifiedName] ':' value=EBoolean
;
FloatAction:
	actor=[FloatActor|QualifiedName] ':' value=EFloat
;

// Sensors
//
LightSensor:		'@light'	name=Name;
TemperatureSensor:	'@temp'		name=Name;
RainSensor:			'@rain'		name=Name;
SwitchSensor:		'@switch'	name=Name;
NumberSensor:		'@number'	name=Name;
ClockSensor:		'@clock'	name=Name;

// Actors
//
LampActor:			'@lamp'		name=Name;
RollerActor:		'@roller'	name=Name;
RoofWindowActor:	'@roof'		name=Name;
RadiatorActor:		'@radiator'	name=Name;
BoilerActor:		'@boiler'	name=Name;
CoffeeActor:		'@coffee'	name=Name;

// Operators, Enumerations, Values, Identifiers
// name system: full qualified names used for cross-referencing
//
Name: ID;
QualifiedName: Name ('.' Name)*;

enum BinaryOperator: 
	AND="and" | OR="or" | XOR="xor";
	
enum Comparator: 
	LT="<" | LE="<=" | GE=">=" | GT=">";

EFloat returns ecore::EFloat:
	'-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
