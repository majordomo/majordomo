-- @nsURI House=http://House2/1.0
-- @nsURI Majordomo=http://mdsd.altimos.de/majordomo/1.0

module house2domo;
create OUT : Majordomo from IN : House;

-- Unused input:
--   House.name (our house has no name)
--   EqualCondition.valuecond (we don't support float equals since it's analog)
--   TemperatureSensor.temp
--   TwilightSwitch.active
--   RainSensor.active
--   Boiler.isOn
--   RollerBlind.isUp
--   Lamp.isOn

-- multiple same-named sensors/actors will collide

helper def : convert_name(name : String) : String = name.regexReplaceAll('([^a-zA-Z0-9_]+|^[0-9])', '_');

abstract rule NamedElement {
	-- Note: the types here are irrelevant!
	from
		i : House!NamedElement
	to
		o : Majordomo!NamedElement (
			name <- thisModule.convert_name(i.name)
		)
}

rule Temperature2TemperatureSensor extends NamedElement {
	from
		i : House!TemperatureSensor
	to
		o : Majordomo!TemperatureSensor
}

rule Twilight2LightSensor extends NamedElement {
	from
		i : House!TwilightSwitch
	to
		o : Majordomo!LightSensor
}

rule Rain2RainSensor extends NamedElement {
	from
		i : House!RainSensor
	to
		o : Majordomo!RainSensor
}

rule Boiler2Radiator extends NamedElement {
	from
		i : House!Boiler
	to
		o : Majordomo!RadiatorActor
}

rule RollerBlind2Roller extends NamedElement {
	from
		i : House!RollerBlind
	to
		o : Majordomo!RollerActor
}

rule Lamp2Lamp extends NamedElement {
	from
		i : House!Lamp
	to
		o : Majordomo!LampActor
}

rule House2Domo {
	from
		i : House!House
	to
		majordomo : Majordomo!Majordomo (
			house <- house,
			rooms <- i.rooms,
			program <- program
		),
		house : Majordomo!House (
			sensors <- House!Sensor.allInstances()->select(s | s.isLocatedIn = i),
			actors <- House!Actor.allInstances()->select(a | a.isLocatedIn = i)
		),
		program : Majordomo!Program (
			rules <- i.controlRules
		)
}

rule Room2Room extends NamedElement {
	from
		i : House!Room
	to
		o : Majordomo!Room (
			sensors <- House!Sensor.allInstances()->select(s | s.isLocatedIn = i),
			actors <- House!Actor.allInstances()->select(a | a.isLocatedIn = i)
		)
}

rule ControlRule2Rule {
	from
		i : House!ControlRule
	to
		o : Majordomo!Rule (
			statement <- i.condition,
			actions <- Sequence{i.action}
		)
}

rule EqualCond2BoolStmt {
	from
		-- TwilightSwitches can't be used with BooleanConditions (they deliver float values)
		i : House!EqualCondition (
			not i.sensor.oclIsKindOf(House!TwilightSwitch) and i.boolcond
		)
	to	
		o : Majordomo!BooleanSensorStatement (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		)
}

rule EqualCond2NotBoolStmt {
	from
		-- TwilightSwitches can't be used with BooleanConditions (they deliver float values)
		i : House!EqualCondition (
			not i.sensor.oclIsKindOf(House!TwilightSwitch) and not i.boolcond
		)
	to
		o : Majordomo!NotOperation(
			statement <- stmt
		),
		stmt : Majordomo!BooleanSensorStatement (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		)
}

rule EqualCond2LesserFloatCond {
	from
		-- wenn TwilightSwitch.active gelten soll, muss LightSensor.value != 1.0
		i : House!EqualCondition (
			i.sensor.oclIsKindOf(House!TwilightSwitch) and i.boolcond
		)
	to
		o : Majordomo!CompareOperation (
			comparator <- #LE,
			left <- left,
			right <- right
		),
		left : Majordomo!SensorValue (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		),
		right : Majordomo!ConstantValue (
			value <- 0.5
		)
}

rule EqualCond2GreaterFloatCond {
	from
		-- wenn TwilightSwitch.active nicht gelten soll, muss LightSensor.value != 0.0
		i : House!EqualCondition (
			i.sensor.oclIsKindOf(House!TwilightSwitch) and (not i.boolcond)
		)
	to
		o : Majordomo!CompareOperation (
			comparator <- #GE,
			left <- left,
			right <- right
		),
		left : Majordomo!SensorValue (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		),
		right : Majordomo!ConstantValue (
			value <- 0.5
		)
}

rule LessThanCond2LesserFloatCond {
	from
		i : House!LessThanCondition
	to
		o : Majordomo!CompareOperation (
			comparator <- #LE,
			left <- left,
			right <- right
		),
		left : Majordomo!SensorValue (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		),
		right : Majordomo!ConstantValue (
			value <- i.threshold
		)
}

rule GreaterThanCond2GreaterFloatCond {
	from
		i : House!GreaterThanCondition
	to
		o : Majordomo!CompareOperation (
			comparator <- #GE,
			left <- left,
			right <- right
		),
		left : Majordomo!SensorValue (
			sensor <- Majordomo!Sensor.allInstances()->select(s | s.name = thisModule.convert_name(i.sensor.name))->first()
		),
		right : Majordomo!ConstantValue (
			value <- i.threshold
		)
}

rule BooleanAction2BooleanAction {
	from
		-- Lamps can't be controlled by BooleanActions (they accept float values)
		i : House!BooleanAction (
			not i.actor.oclIsKindOf(House!Lamp)
		)
	to
		o : Majordomo!BooleanAction (
			value <- i.switchTo,
			actor <- Majordomo!Actor.allInstances()->select(a | a.name = thisModule.convert_name(i.actor.name))->first()
		)
}

rule BooleanAction2FloatAction_On {
	from
		-- Lamp should be enabled
		i : House!BooleanAction (
			i.actor.oclIsKindOf(House!Lamp) and i.switchTo
		)
	to
		o : Majordomo!FloatAction (
			value <- 1.0,
			actor <- Majordomo!Actor.allInstances()->select(a | a.name = thisModule.convert_name(i.actor.name))->first()
		)
}

rule BooleanAction2FloatAction_Off {
	from
		-- Lamp should be enabled
		i : House!BooleanAction (
			i.actor.oclIsKindOf(House!Lamp) and (not i.switchTo)
		)
	to
		o : Majordomo!FloatAction (
			value <- 0.0,
			actor <- Majordomo!Actor.allInstances()->select(a | a.name = thisModule.convert_name(i.actor.name))->first()
		)
}

rule ValueAction2FloatAction {
	from
		i : House!ValueAction
	to
		o : Majordomo!FloatAction (
			value <- i.switchToValue,
			actor <- Majordomo!Actor.allInstances()->select(a | a.name = thisModule.convert_name(i.actor.name))->first()
		)
}
